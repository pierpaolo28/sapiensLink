name: Docker Image CI

on:
  push:
    branches: 
      - "dnl/deploy-on-vm"
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/sapiens-deploy.yml"


jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - uses: actions/checkout@v4

    - name: app_secrets.py file build
      working-directory: ./backend
      run: |
        echo "SENDGRID_API_KEY = '${{ secrets.SENDGRID_API_KEY }}'" > app_secrets.py
        echo "FROM_EMAIL = '${{ vars.FROM_EMAIL }}'" >> app_secrets.py
        echo "POSTGRESQL_USERNAME = '${{ vars.POSTGRESQL_USERNAME }}'" >> app_secrets.py
        echo "POSTGRESQL_PASSWORD = '${{ secrets.POSTGRESQL_PASSWORD }}'" >> app_secrets.py
        echo "GOOGLE_CLIENT_ID = '${{ secrets.GOOGLE_CLIENT_ID }}'" >> app_secrets.py
        echo "GOOGLE_CLIENT_SECRET = '${{ secrets.GOOGLE_CLIENT_SECRET }}'" >> app_secrets.py
        echo "DJANGO_SECRET_KEY = '${{ secrets.DJANGO_SECRET_KEY }}'" >> app_secrets.py
        echo "CUSTOM_HEADER_VALUE = '${{ secrets.CUSTOM_HEADER_VALUE }}'" >> app_secrets.py

    - name: .env file build
      working-directory: ./frontend
      run: |
        echo "NEXT_PUBLIC_GOOGLE_CLIENT_ID = '${{ secrets.GOOGLE_CLIENT_ID }}'" > .env
        echo "NEXT_PUBLIC_MAILCHIMP_API_KEY = '${{ secrets.NEXT_PUBLIC_MAILCHIMP_API_KEY }}'" >> .env
        echo "NEXT_PUBLIC_FORMSPREE_API_KEY = '${{ secrets.NEXT_PUBLIC_FORMSPREE_API_KEY }}'" >> .env
        echo "NEXT_PUBLIC_X_NEXTJS_APPLICATION = '${{ secrets.CUSTOM_HEADER_VALUE }}'" >> .env

    # - name: .ssh/id_rsa file build
    #   run: |
    #     mkdir -p .ssh
    #     echo "${{ secrets.SSH_PRIVATE_KEY }}" >> .ssh/id_rsa

    - name: ssh file build
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/id_rsa.key
        chmod 600 ~/.ssh/staging.key
        cat >>~/.ssh/config <<END
        Host staging
            HostName 135.181.92.158
            User root
            IdentityFile ~/.ssh/id_rsa.key
            StrictHostKeyChecking no
        END

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # - run: |
    #     ls -al
    #     cd .ssh
    #     ls -al


    # - name: Build Nginx
    #   run: |
    #     docker build . -f Dockerfile.nginx -t danilocacace/dani966:nginx --platform linux/arm64
    #     docker push danilocacace/dani966:nginx

    # - name: Build Django
    #   working-directory: ./backend
    #   run: |
    #     docker build . -f Dockerfile  -t danilocacace/dani966:django --platform linux/arm64
    #     docker push danilocacace/dani966:django
    
    # - name: Build Celery
    #   working-directory: ./backend
    #   run: |
    #     docker build . -f Dockerfile.celery  -t danilocacace/dani966:celery --platform linux/arm64
    #     docker push danilocacace/dani966:celery
  
    # - name: Build NextJS
    #   working-directory: ./frontend
    #   run: |
    #     docker build . -f Dockerfile  -t danilocacace/dani966:nextjs --platform linux/arm64
    #     docker push danilocacace/dani966:nextjs

    - name: multiple command
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 135.181.92.158
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          whoami
          ls -al

    - name: Update website
      run: |
        scp -i ./.ssh/id_rsa docker-compose.yml root@135.181.92.158:/root
        ssh -i ./.ssh/id_rsa root@135.181.92.158 'DB_USER='admin' DB_PASSWORD='password' docker-compose down'
        ssh -i ./.ssh/id_rsa root@135.181.92.158 'DB_USER='admin' DB_PASSWORD='password' docker-compose pull'
        ssh -i ./.ssh/id_rsa root@135.181.92.158 'DB_USER='admin' DB_PASSWORD='password' docker-compose up -d'




    # - name: 
    #   run: docker build . -f Dockerfile.nginx -t danilocacace/dani966:nginx --platform linux/arm64

    # - name: Build Django
    #   working-directory: ./backend
    #   run: docker build . -f Dockerfile  -t danilocacace/dani966:django --platform linux/arm64
    
    # - name: Build Celery
    #   working-directory: ./backend
    #   run: docker build . -f Dockerfile.celery  -t danilocacace/dani966:celery --platform linux/arm64
  
    # - name: Build NextJS
    #   working-directory: ./frontend
    #   run: docker build . -f Dockerfile  -t danilocacace/dani966:nextjs --platform linux/arm64

# TO-DO
# - scrivere i due file di variabili da inserire nel codice
# - fare la push
# - fare il deploy collegandosi in SSH alla vm